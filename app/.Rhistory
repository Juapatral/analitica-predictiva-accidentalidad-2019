acc1 <- acc %>%
group_by(CLASE, FECHA) %>%
summarize(total_registros = n())
acc_c1 <- filter(acc1, CLASE == "ATROPELLO")
acc_c2 <- filter(acc1, CLASE == "CAIDA OCUPANTE")
acc_c3 <- filter(acc1, CLASE == "CHOQUE")
acc_c4 <- filter(acc1, CLASE == "INCENDIO")
acc_c5 <- filter(acc1, CLASE == "OTRO")
acc_c6 <- filter(acc1, CLASE == "VOLCAMIENTO")
acc_c1$year<-format(acc_c1$FECHA,"%Y")
acc_c2$year<-format(acc_c2$FECHA,"%Y")
acc_c3$year<-format(acc_c3$FECHA,"%Y")
acc_c4$year<-format(acc_c4$FECHA,"%Y")
acc_c5$year<-format(acc_c5$FECHA,"%Y")
acc_c6$year<-format(acc_c6$FECHA,"%Y")
aggregate(total_registros~year,data=acc_c1,FUN=mean)
aggregate(total_registros~year,data=acc_c2,FUN=mean)
aggregate(total_registros~year,data=acc_c3,FUN=mean)
aggregate(total_registros~year,data=acc_c4,FUN=mean)
aggregate(total_registros~year,data=acc_c5,FUN=mean)
aggregate(total_registros~year,data=acc_c6,FUN=mean)
acc_c1$Fecha<-as.Date(acc_c1$FECHA,"%d/%m/%Y")
acc_c2$Fecha<-as.Date(acc_c2$FECHA,"%d/%m/%Y")
acc_c3$Fecha<-as.Date(acc_c3$FECHA,"%d/%m/%Y")
acc_c4$Fecha<-as.Date(acc_c4$FECHA,"%d/%m/%Y")
acc_c5$Fecha<-as.Date(acc_c5$FECHA,"%d/%m/%Y")
acc_c6$Fecha<-as.Date(acc_c6$FECHA,"%d/%m/%Y")
acc_c1$mes<-format(acc_c1$Fecha,"%m")
acc_c2$mes<-format(acc_c2$Fecha,"%m")
acc_c3$mes<-format(acc_c3$Fecha,"%m")
acc_c4$mes<-format(acc_c4$Fecha,"%m")
acc_c5$mes<-format(acc_c5$Fecha,"%m")
acc_c6$mes<-format(acc_c6$Fecha,"%m")
with(acc_c1, month.abb[mes])
with(acc_c2, month.abb[mes])
with(acc_c3, month.abb[mes])
with(acc_c4, month.abb[mes])
with(acc_c5, month.abb[mes])
with(acc_c6, month.abb[mes])
acc_c1$mes<-strftime(acc_c1$Fecha, format = "%B")
acc_c2$mes<-strftime(acc_c2$Fecha, format = "%B")
acc_c3$mes<-strftime(acc_c3$Fecha, format = "%B")
acc_c4$mes<-strftime(acc_c4$Fecha, format = "%B")
acc_c5$mes<-strftime(acc_c5$Fecha, format = "%B")
acc_c6$mes<-strftime(acc_c6$Fecha, format = "%B")
acc_c1$mes<-ordered(acc_c1$mes,levels=c( "enero", "febrero", "marzo",
"abril", "mayo", "junio","julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"))
acc_c2$mes<-ordered(acc_c2$mes,levels=c( "enero", "febrero", "marzo",
"abril", "mayo", "junio","julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"))
acc_c3$mes<-ordered(acc_c3$mes,levels=c( "enero", "febrero", "marzo",
"abril", "mayo", "junio","julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"))
acc_c4$mes<-ordered(acc_c4$mes,levels=c( "enero", "febrero", "marzo",
"abril", "mayo", "junio","julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"))
acc_c5$mes<-ordered(acc_c5$mes,levels=c( "enero", "febrero", "marzo",
"abril", "mayo", "junio","julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"))
acc_c6$mes<-ordered(acc_c6$mes,levels=c( "enero", "febrero", "marzo",
"abril", "mayo", "junio","julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"))
aggregate(total_registros~year*mes,data=acc_c1,FUN=mean)
aggregate(total_registros~year*mes,data=acc_c2,FUN=mean)
aggregate(total_registros~year*mes,data=acc_c3,FUN=mean)
aggregate(total_registros~year*mes,data=acc_c4,FUN=mean)
aggregate(total_registros~year*mes,data=acc_c5,FUN=mean)
aggregate(total_registros~year*mes,data=acc_c6,FUN=mean)
acc_c1$diaano<-strftime(acc_c1$Fecha, format = "%j")
acc_c2$diaano<-strftime(acc_c2$Fecha, format = "%j")
acc_c3$diaano<-strftime(acc_c3$Fecha, format = "%j")
acc_c4$diaano<-strftime(acc_c4$Fecha, format = "%j")
acc_c5$diaano<-strftime(acc_c5$Fecha, format = "%j")
acc_c6$diaano<-strftime(acc_c6$Fecha, format = "%j")
acc_c1$diames<-format(acc_c1$Fecha,"%d")
acc_c2$diames<-format(acc_c2$Fecha,"%d")
acc_c3$diames<-format(acc_c3$Fecha,"%d")
acc_c4$diames<-format(acc_c4$Fecha,"%d")
acc_c5$diames<-format(acc_c5$Fecha,"%d")
acc_c6$diames<-format(acc_c6$Fecha,"%d")
acc_c1$dia_semana<-weekdays(acc_c1$Fecha)
acc_c2$dia_semana<-weekdays(acc_c2$Fecha)
acc_c3$dia_semana<-weekdays(acc_c3$Fecha)
acc_c4$dia_semana<-weekdays(acc_c4$Fecha)
acc_c5$dia_semana<-weekdays(acc_c5$Fecha)
acc_c6$dia_semana<-weekdays(acc_c6$Fecha)
acc_c1$dia_semana<-ordered(acc_c1$dia_semana,levels=c( "lunes", "martes", "miércoles", "jueves", "viernes", "sábado","domingo"))
acc_c2$dia_semana<-ordered(acc_c2$dia_semana,levels=c( "lunes", "martes", "miércoles", "jueves", "viernes", "sábado","domingo"))
acc_c3$dia_semana<-ordered(acc_c3$dia_semana,levels=c( "lunes", "martes", "miércoles", "jueves", "viernes", "sábado","domingo"))
acc_c4$dia_semana<-ordered(acc_c4$dia_semana,levels=c( "lunes", "martes", "miércoles", "jueves", "viernes", "sábado","domingo"))
acc_c5$dia_semana<-ordered(acc_c5$dia_semana,levels=c( "lunes", "martes", "miércoles", "jueves", "viernes", "sábado","domingo"))
acc_c6$dia_semana<-ordered(acc_c6$dia_semana,levels=c( "lunes", "martes", "miércoles", "jueves", "viernes", "sábado","domingo"))
plot_ly (data=subset(acc_c1,subset = (FECHA<="2018-12-31")),
x = ~FECHA,
y = ~total_registros,
type = "scatter" ,mode = "lines",
split = ~year,
line=list(width=1))%>%
layout(title='Registros de accidentalidad atropello',
xaxis=list(title="Día"),
yaxis=list(title="Total registros"))
plot_ly (data=subset(acc_c1,subset = (Fecha<="2018-12-31")),
x = ~year,
y = ~total_registros,
type = "box")%>%
layout(title='Registros de accidentes por Atropello',
xaxis=list(title="Año"),
yaxis=list(title="Total registros"))
plot_ly (data=subset(acc_c2,subset = (Fecha<="2018-12-31")),
x = ~year,
y = ~total_registros,
type = "box")%>%
layout(title='Registros de accidentes por caída ocupante',
xaxis=list(title="Año"),
yaxis=list(title="Total registros"))
plot_ly (data=subset(acc_c3,subset = (Fecha<="2018-12-31")),
x = ~year,
y = ~total_registros,
type = "box")%>%
layout(title='Registros de accidentes por choque',
xaxis=list(title="Año"),
yaxis=list(title="Total registros"))
plot_ly (data=subset(acc_c3,subset = (Fecha<="2018-12-31")),
x = ~dia_semana,
y = ~total_registros,
type = "box")%>%
layout(title='Registros de accidentes por choque',
xaxis=list(title="Año"),
yaxis=list(title="Total registros"))
modelo_lmc1<-lm(total_registros~dia_semana+mes,data=acc_c1,subset = (Fecha<="2017-12-31"))
summary(modelo_lmc1)
y0_trc1<-mean(acc_c1$total_registros[acc_c1$Fecha<="2017-12-31"])
r0_trc1<-acc_c1$total_registros[acc_c1$Fecha<="2017-12-31"]-y0_trc1
R0_trc1<-mean(r0_trc1^2)
y_pred_tr_lmc1<-predict(modelo_lmc1)
r_tr_lmc1<-acc_c1$total_registros[acc_c1$Fecha<="2017-12-31"]-y_pred_tr_lmc1
R_tr_lmc1<-mean(r_tr_lmc1^2)
R2_lmc1<-1-R_tr_lmc1/R0_trc1
print(R2_lmc1)
modelo_glmc1<-glm(total_registros~dia_semana+mes,data=acc_c1,subset = (Fecha<="2017-12-31"),family = "poisson")
summary(modelo_glmc1)
y_pred_tr_glmc1<-predict(modelo_glmc1,type="response")
r_tr_glmc1<-acc_c1$total_registros[acc_c1$Fecha<="2017-12-31"]-y_pred_tr_glmc1
R_tr_glmc1<-mean(r_tr_glmc1^2)
R2_tr_glmc1<-1-R_tr_glmc1/R0_trc1
print(R2_tr_glmc1)
resultados_lm_glmc1<-data.frame(Fecha=  acc_c1$Fecha[acc_c1$Fecha<="2017-12-31"],     total_registrosc1=acc_c1$total_registros[acc_c1$Fecha<="2017-12-31"],
pred_lmc1=y_pred_tr_lmc1,
pred_glmc1=y_pred_tr_glmc1,
res_lmc1=r_tr_lmc1,
res_glmc1=r_tr_glmc1)
plot_ly (data=resultados_lm_glmc1,
x = ~Fecha,
y = ~total_registrosc1,
type = "scatter" ,mode = "lines",
name='Real',
line=list(width=1,color='rgb(60, 195, 64)'))%>%
add_trace(y= ~pred_lmc1,
name='Modelo lineal general',
line=list(width=1,color='rgb(22, 96, 167)'))%>%
add_trace(y= ~pred_glmc1,
name='Modelo Poisson',
line=list(width=1,color='rgb(255, 51, 0)'))%>%
layout(title='Registros de accidentes',
xaxis=list(title="Fecha"),
yaxis=list(title="Total registros"),
legend = list(x = 0.75, y = 0.9))
plot_ly (data=resultados_lm_glmc1,
x = ~total_registrosc1,
y = ~pred_lmc1,
text = ~Fecha,
type = "scatter" ,mode="markers",
name='Modelo lineal general',
marker=list(size=3,color='rgb(22, 96, 167)'))%>%
add_trace(y= ~pred_glmc1,
text = ~Fecha,
name='Modelo lineal Poisson',
marker=list(size=3,color='rgb(255, 51, 0)'))%>%
add_trace(x=c(-500:3500),y=c(-500:3500),
mode="lines",text=rep(NA,4001),
name="Identidad")%>%
layout(title='Registros de accidentes',
xaxis=list(title="Observados"),
yaxis=list(title="Predichos"),
legend = list(x = 0.75, y = 0.9))
View(acc)
View(acc)
View(acc)
View(acc)
View(acc)
View(acc)
# cargar librerias
library(data.table)   # manejo de tablas
library(purrr)        # optimizacion de bucles
library(dplyr)        # manejo de tablas
library(plotly)       # graficos en html
library(tidyr)        # limpieza de datos
library(stringr)      # limpieza de texto
library(lubridate)    # limpieza de fechas
library(sf)           # manejo de archivos espaciales
# lista archivos
lista <- list.files(pattern = "^Acc.*.csv", include.dirs = T, recursive = T)
# leer todos los archivos
lista_df <- map(lista, fread, sep = ",", encoding = "UTF-8", colClasses = "c")
# agregar archivos del 2014 a 2018
acc <- bind_rows(lista_df)
# ver cabecera del archivo
head(acc)
# organizar fecha
acc$FECHA <- ymd(gsub(pattern = "T.*", replacement = "", acc$FECHA),
"%Y-%M-%D")[1:209426]
# eliminar datos nulos y corregir clase
acc <- acc[-which(acc$CLASE == ""),]
acc$CLASE <- iconv(acc$CLASE, from = "UTF-8", to = "ASCII//TRANSLIT")
acc$CLASE <- gsub("DE ", "", toupper(acc$CLASE))
# eliminar datos nulos y corregir disenio
acc <- acc[-which(acc$DISENO == ""),]
acc$DISENO <- iconv(acc$DISENO, from = "UTF-8", to = "ASCII//TRANSLIT")
acc$DISENO <- gsub("DE ", "", toupper(acc$DISENO))
# corregir tildes de DIA_NOMBRE
acc$DIA_NOMBRE <- iconv(acc$DIA_NOMBRE, from = "UTF-8", to = "ASCII//TRANSLIT")
# crear columna de comuna_barrio
acc <- mutate(acc, COMUNA_BARRIO = str_sub(CBML, 1, 4))
# cargar archivo shp de barrios de medellin
barrio <- read_sf("files/Limite_Barrio_Vereda_Catastral/Limite_Barrio_Vereda_Catastral.shp")
# unir columnas de nombre barrio y comuna
acc <- inner_join(acc,
select(barrio, CODIGO, NOMBRE_COM, NOMBRE_BAR),
by = c("COMUNA_BARRIO" = "CODIGO"))
# limpiar nombre de barrios
acc$NOMBRE_BAR <- iconv(acc$NOMBRE_BAR, from = "UTF-8", to = "ASCII//TRANSLIT")
acc$NOMBRE_BAR <- toupper(acc$NOMBRE_BAR)
# eliminar posibles duplicados por errores de union
acc <- data.table:::unique.data.table(acc, by = "RADICADO")
# eliminar columnas
acc <- select(acc, -BARRIO, -COMUNA, -OBJECTID, -RADICADO, -DIRECCION_ENC,
-DIRECCION, -HORA, -CBML, -TIPO_GEOCOD, -MES_NOMBRE, -geometry)
# renombrar
names(acc)[12:13] <- c("COMUNA","BARRIO")
festivos <- fread("files/festivos_y_especiales.csv", header = T)
festivos[,names(festivos)[-1]] <- festivos%>%transmute_at(c(names(festivos)[-1]),funs(ifelse(. == "X","Si", ifelse(. == "","No",.))))
festivos$FECHA <- ymd(festivos$FECHA)[1:172]
head(acc)
acc <- merge(x=acc,y=festivos, by ="FECHA", all.x = T)
acc[,names(festivos)[-1]]<-acc%>%transmute_at(c(names(festivos)[-1]),funs(ifelse(is.na(.),"No",.)))
head(acc)
View(acc)
View(acc)
acc_fecha1 <- acc %>%
group_by(FECHA,CLASE, GRAVEDAD, FESTIVO, MADRE, NAVIDAD, SEMSANTA, BRUJITOS,                       ESCOLAR) >%>
acc_fecha1 <- acc %>%
group_by(FECHA,CLASE, GRAVEDAD, FESTIVO, MADRE, NAVIDAD, SEMSANTA, BRUJITOS,ESCOLAR) >%>
acc_fecha1 <- acc %>%
group_by(FECHA,CLASE, GRAVEDAD, FESTIVO, MADRE, NAVIDAD, SEMSANTA, BRUJITOS,ESCOLAR)
head(acc_fecha1)
knitr::opts_chunk$set(echo = TRUE)
# se instalan los paquetes necesarios
#install.packages("tidyverse")    # dialecto de ciencia de datos
#install.packages("data.table")   # manejo de tablas
#install.packages("plotly")       # graficas semi-dinamicas
#install.packages("rmarkdown")    # utilizar rmarkdown
#install.packages("shiny")        # tableros de control dinamicos
#install.packages("prettydoc")    # dar formato a rmarkdown
# cargar librerias
library(data.table)   # manejo de tablas
library(purrr)        # optimizacion de bucles
library(dplyr)        # manejo de tablas
library(plotly)       # graficos en html
library(tidyr)        # limpieza de datos
library(stringr)      # limpieza de texto
library(lubridate)    # limpieza de fechas
library(sf)           # manejo de archivos espaciales
# lista archivos
lista <- list.files(pattern = "^Acc.*.csv", include.dirs = T, recursive = T)
# leer todos los archivos
lista_df <- map(lista, fread, sep = ",", encoding = "UTF-8", colClasses = "c")
# agregar archivos del 2014 a 2018
acc <- bind_rows(lista_df)
# ver cabecera del archivo
head(acc)
# organizar fecha
acc$FECHA <- ymd(gsub(pattern = "T.*", replacement = "", acc$FECHA),
"%Y-%M-%D")[1:209426]
# eliminar datos nulos y corregir clase
acc <- acc[-which(acc$CLASE == ""),]
acc$CLASE <- iconv(acc$CLASE, from = "UTF-8", to = "ASCII//TRANSLIT")
acc$CLASE <- gsub("DE ", "", toupper(acc$CLASE))
# eliminar datos nulos y corregir disenio
acc <- acc[-which(acc$DISENO == ""),]
acc$DISENO <- iconv(acc$DISENO, from = "UTF-8", to = "ASCII//TRANSLIT")
acc$DISENO <- gsub("DE ", "", toupper(acc$DISENO))
# corregir tildes de DIA_NOMBRE
acc$DIA_NOMBRE <- iconv(acc$DIA_NOMBRE, from = "UTF-8", to = "ASCII//TRANSLIT")
# crear columna de comuna_barrio
acc <- mutate(acc, COMUNA_BARRIO = str_sub(CBML, 1, 4))
# cargar archivo shp de barrios de medellin
barrio <- read_sf("files/Limite_Barrio_Vereda_Catastral/Limite_Barrio_Vereda_Catastral.shp")
# unir columnas de nombre barrio y comuna
acc <- inner_join(acc,
select(barrio, CODIGO, NOMBRE_COM, NOMBRE_BAR),
by = c("COMUNA_BARRIO" = "CODIGO"))
# limpiar nombre de barrios
acc$NOMBRE_BAR <- iconv(acc$NOMBRE_BAR, from = "UTF-8", to = "ASCII//TRANSLIT")
acc$NOMBRE_BAR <- toupper(acc$NOMBRE_BAR)
# eliminar posibles duplicados por errores de union
acc <- data.table:::unique.data.table(acc, by = "RADICADO")
# eliminar columnas
acc <- select(acc, -BARRIO, -COMUNA, -OBJECTID, -RADICADO, -DIRECCION_ENC,
-DIRECCION, -HORA, -CBML, -TIPO_GEOCOD, -MES_NOMBRE, -geometry)
# renombrar
names(acc)[12:13] <- c("COMUNA","BARRIO")
festivos <- fread("files/festivos_y_especiales.csv", header = T)
festivos[,names(festivos)[-1]] <- festivos%>%transmute_at(c(names(festivos)[-1]),funs(ifelse(. == "X","Si", ifelse(. == "","No",.))))
festivos$FECHA <- ymd(festivos$FECHA)[1:172]
head(acc)
acc <- merge(x=acc,y=festivos, by ="FECHA", all.x = T)
acc[,names(festivos)[-1]]<-acc%>%transmute_at(c(names(festivos)[-1]),funs(ifelse(is.na(.),"No",.)))
head(acc)
acc_comuna <- acc %>%
group_by(COMUNA) %>%
summarize(total_registros = n())
ggplot(data=acc_comuna, aes(x=COMUNA, y=total_registros)) +
geom_bar(stat="identity", position="dodge", fill = "blue3", color = "grey48", alpha = .8)+
xlab("Comuna")+ # eje x
ylab("Total registros")+ # eje y
ggtitle("Número de accidentes por comuna")+ #título del gráfico
coord_flip()
acc_mes <- acc %>%
group_by(MES) %>%
summarize(total_registros = n())
p1 <- ggplot(data=acc_mes, aes(x=MES, y=total_registros)) +
geom_bar(stat="identity", position="dodge", fill = "blue3", color = "grey48", alpha =
.8)+
xlab("Mes")+ # eje x
ylab("Total registros")+ # eje y
ggtitle("Número de accidentes por mes") #título del gráfico
acc_nombredia <- acc %>%
group_by(DIA_NOMBRE) %>%
summarize(total_registros = n())
acc_nombredia$DIA_NOMBRE<-ordered(acc_nombredia$DIA_NOMBRE,levels=c( "LUNES", "MARTES", "MIERCOLES", "JUEVES", "VIERNES", "SABADO","DOMINGO"))
p2 <- ggplot(data=acc_nombredia, aes(x=DIA_NOMBRE, y=total_registros)) +
geom_bar(stat="identity", position="dodge", fill = "blue3", color = "grey48", alpha =
.8)+
xlab("Días")+ # eje x
ylab("Total registros")+ # eje y
ggtitle("Número de accidentes por días de la semana") #título del gráfico
acc_ano <- acc %>%
group_by(PERIODO) %>%
summarize(total_registros = n())
p3 <- ggplot(data=acc_ano, aes(x=PERIODO, y=total_registros)) +
geom_bar(stat="identity", position="dodge", fill = "blue3", color = "grey48", alpha =
.8)+
xlab("Año")+ # eje x
ylab("Total registros")+ # eje y
ggtitle("Número de accidentes por año") #título del gráfico
acc_clase <- acc %>%
group_by(CLASE) %>%
summarize(total_registros = n())
p4 <- ggplot(data=acc_clase, aes(x=CLASE, y=total_registros)) +
geom_bar(stat="identity", position="dodge", fill = "blue3", color = "grey48", alpha =
.8)+
xlab("Tipo de accidente")+ # eje x
ylab("Total registros")+ # eje y
ggtitle("Número de accidentes por tipo de accidente") #título del gráfico
acc_gravedad <- acc %>%
group_by(GRAVEDAD) %>%
summarize(total_registros = n())
ggplot(data=acc_gravedad, aes(x=GRAVEDAD, y=total_registros)) +
geom_bar(stat="identity", position="dodge", fill = "blue3", color = "grey48", alpha =
.8)+
xlab("Gravedad del accidente")+ # eje x
ylab("Total registros")+ # eje y
ggtitle("Número de accidentes por gravedad del accidente") #título del gráfico
acc_diseno <- acc %>%
group_by(DISENO) %>%
summarize(total_registros = n())
ggplot(data=acc_diseno, aes(x=DISENO, y=total_registros)) +
geom_bar(stat="identity", position="dodge", fill = "blue3", color = "grey48", alpha =
.8)+
xlab("Diseño de la vía")+ # eje x
ylab("Total registros")+ # eje y
ggtitle("Número de accidentes por tipo de vía")+ #título del gráfico
coord_flip()
acc_group_clase<- acc %>% group_by(CLASE, GRAVEDAD) %>% summarize(conteo = n())
ggplot(data=acc_group_clase, aes(x=CLASE, y=conteo, fill=GRAVEDAD)) +
geom_bar(stat="identity", position="dodge")+
coord_flip()
acc_group_mes<- acc %>% group_by(MES,CLASE) %>% summarize(conteo = n())
ggplot(data=acc_group_mes, aes(x=CLASE, y=conteo, fill=MES)) +
geom_bar(stat="identity", position="dodge")
acc_group_year<- acc %>% group_by(CLASE, PERIODO) %>% summarize(conteo = n())
ggplot(data=acc_group_year, aes(x=CLASE, y=conteo, fill=PERIODO)) +
geom_bar(stat="identity", position="dodge")+
scale_fill_manual(values=c("#d0d1e6", "#bdc9e1","#74a9cf","#2b8cbe","#045a8d"))
acc_group_dia<- acc %>% group_by(CLASE, DIA_NOMBRE) %>% summarize(conteo = n())
ggplot(data=acc_group_dia, aes(x=CLASE, y=conteo, fill=DIA_NOMBRE)) +
geom_bar(stat="identity", position="dodge")+
scale_fill_manual(values=c("#67001f","#b2182b","#d6604d","#f4a582","#fddbc7","#d1e5f0", "#92c5de"))+
coord_flip()
acc_group_festivo<- acc %>% group_by(CLASE, FESTIVO) %>% summarize(conteo = n())
ggplot(data=acc_group_festivo, aes(x=CLASE, y=conteo, fill=FESTIVO)) +
geom_bar(stat="identity", position="dodge")
acc_fecha1 <- acc %>%
group_by(FECHA,CLASE, GRAVEDAD, FESTIVO, MADRE, NAVIDAD, SEMSANTA, BRUJITOS,                       ESCOLAR) >%>
#acc_year$PERIODO <- as.numeric(acc_year$PERIODO)
modelo_lm_1<-lm(ACCIDENTES~FECHA+CLASE+DIA_NOMBRE+PERIODO+FESTIVO+NAVIDAD+SEMSANTA+ESCOLAR,data=acc_agrupado_1, subset = (FECHA<="2017-12-31"))
acc_fecha1 <- acc %>%
group_by(FECHA,CLASE, GRAVEDAD, FESTIVO, MADRE, NAVIDAD, SEMSANTA, BRUJITOS,                       ESCOLAR) >%>
acc_fecha <- acc %>%
group_by(FECHA) %>%
summarize(total_registros = n())
plot_ly (data=subset(acc_fecha,subset = (FECHA<="2018-12-31")),
x = ~FECHA,
y = ~total_registros,
type = "scatter" ,mode = "lines",
line=list(width=1,color='rgb(205, 12, 24)'))%>%
layout(title='Registros de accidentalidad',
xaxis=list(title="Día"),
yaxis=list(title="Total registros"))
acc_fecha$year<-format(acc_fecha$FECHA,"%Y")
plot_ly (data=subset(acc_fecha,subset = (FECHA<="2018-12-31")),
x = ~FECHA,
y = ~total_registros,
type = "scatter" ,mode = "lines",
split = ~year,
line=list(width=1))%>%
layout(title='Registros de accidentalidad',
xaxis=list(title="Día"),
yaxis=list(title="Total registros"))
aggregate(total_registros~year,data=acc_fecha,FUN=mean)
acc_fecha$Fecha<-as.Date(acc_fecha$FECHA,"%d/%m/%Y")
acc_fecha$mes<-format(acc_fecha$Fecha,"%m")
with(acc_fecha, month.abb[mes])
acc_fecha$mes<-strftime(acc_fecha$Fecha, format = "%B")
acc_fecha$mes<-ordered(acc_fecha$mes,levels=c( "enero", "febrero", "marzo",
"abril", "mayo", "junio","julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"))
aggregate(total_registros~year*mes,data=acc_fecha,FUN=mean)%>%
plot_ly(x = ~mes,
y = ~total_registros,
type = "scatter" ,mode = "lines",
split = ~year,
line=list(width=1))%>%
layout(title='Promedio diario mensual de accidentes registrados',
xaxis=list(title="Día"),
yaxis=list(title="Total registros"))
acc_fecha$diames<-format(acc_fecha$Fecha,"%d")
plot_ly (data=subset(acc_fecha,subset = (Fecha<="2018-12-31")),
x = ~mes,
y = ~total_registros,
type = "box")%>%
layout(title='Registros de accidentes',
xaxis=list(title="Mes"),
yaxis=list(title="Total registros"))
acc_fecha$dia_semana<-weekdays(acc_fecha$Fecha)
acc_fecha$dia_semana<-ordered(acc_fecha$dia_semana,levels=c( "lunes", "martes", "miércoles", "jueves", "viernes", "sábado","domingo"))
plot_ly (data=subset(acc_fecha,subset = (Fecha<="2018-12-31")),
x = ~dia_semana,
y = ~total_registros,
type = "box")%>%
layout(title='Registros de accidentes',
xaxis=list(title="Mes"),
yaxis=list(title="Total registros"))
acc_agrupado_0 <- acc%>%group_by(FECHA,CLASE,DISENO,DIA_NOMBRE,DIA,PERIODO,FESTIVO,MADRE,NAVIDAD,BRUJITOS,SEMSANTA,ESCOLAR)%>%summarise(ACCIDENTES=n())%>%arrange(CLASE,FECHA)
acc_agrupado_0$DIA <- as.integer(acc_agrupado_0$DIA)
acc_agrupado_0$PERIODO <- as.integer(acc_agrupado_0$PERIODO)
acc_agrupado_1<-acc%>%group_by(FECHA,CLASE,DIA_NOMBRE,DIA,PERIODO,FESTIVO,MADRE,NAVIDAD,BRUJITOS,SEMSANTA,ESCOLAR)%>%summarise(ACCIDENTES=n())%>%arrange(CLASE,FECHA)
acc_agrupado_1$DIA <- as.integer(acc_agrupado_1$DIA)
acc_agrupado_1$PERIODO <- as.integer(acc_agrupado_1$PERIODO)
acc_agrupado_2 <-acc%>%group_by(FECHA,DIA_NOMBRE,PERIODO,CLASE,MES,DIA,COMUNA_BARRIO,COMUNA,BARRIO,FESTIVO,MADRE,NAVIDAD,BRUJITOS,SEMSANTA,ESCOLAR)%>%summarise(ACCIDENTES=n())%>%arrange(CLASE,FECHA)
acc_agrupado_2$DIA <- as.integer(acc_agrupado_2$DIA)
acc_agrupado_2$PERIODO <- as.integer(acc_agrupado_2$PERIODO)
acc_agrupado_0 <- acc%>%group_by(FECHA,CLASE,DISENO,DIA_NOMBRE,DIA,PERIODO,FESTIVO,MADRE,NAVIDAD,BRUJITOS,SEMSANTA,ESCOLAR)%>%summarise(ACCIDENTES=n())%>%arrange(CLASE,FECHA)
acc_agrupado_0$DIA <- as.integer(acc_agrupado_0$DIA)
acc_agrupado_0$PERIODO <- as.integer(acc_agrupado_0$PERIODO)
acc_agrupado_1<-acc%>%group_by(FECHA,CLASE,DIA_NOMBRE,DIA,PERIODO,FESTIVO,MADRE,NAVIDAD,BRUJITOS,SEMSANTA,ESCOLAR)%>%summarise(ACCIDENTES=n())%>%arrange(CLASE,FECHA)
acc_agrupado_1$DIA <- as.integer(acc_agrupado_1$DIA)
acc_agrupado_1$PERIODO <- as.integer(acc_agrupado_1$PERIODO)
acc_agrupado_2 <-acc%>%group_by(FECHA,DIA_NOMBRE,PERIODO,CLASE,MES,DIA,COMUNA,FESTIVO,MADRE,NAVIDAD,BRUJITOS,SEMSANTA,ESCOLAR)%>%summarise(ACCIDENTES=n())%>%arrange(CLASE,FECHA)
acc_agrupado_2$DIA <- as.integer(acc_agrupado_2$DIA)
acc_agrupado_2$PERIODO <- as.integer(acc_agrupado_2$PERIODO)
#acc_year$PERIODO <- as.numeric(acc_year$PERIODO)
modelo_lm_0<-lm(ACCIDENTES~FECHA+CLASE+DISENO+DIA_NOMBRE+PERIODO+FESTIVO+MADRE+NAVIDAD+BRUJITOS+SEMSANTA+ESCOLAR,data=acc_agrupado_0, subset = (FECHA<="2017-12-31"))
summary(modelo_lm)
#acc_year$PERIODO <- as.numeric(acc_year$PERIODO)
modelo_lm_1<-lm(ACCIDENTES~FECHA+CLASE+DIA_NOMBRE+DIA+PERIODO+FESTIVO+MADRE+NAVIDAD+BRUJITOS+SEMSANTA+ESCOLAR,data=acc_agrupado_1, subset = (FECHA<="2017-12-31"))
summary(modelo_lm_1)
#acc_year$PERIODO <- as.numeric(acc_year$PERIODO)
modelo_lm_1<-lm(ACCIDENTES~FECHA+CLASE+DIA_NOMBRE+DIA+PERIODO+FESTIVO+MADRE+NAVIDAD+SEMSANTA+ESCOLAR,data=acc_agrupado_1, subset = (FECHA<="2017-12-31"))
summary(modelo_lm_1)
#acc_year$PERIODO <- as.numeric(acc_year$PERIODO)
modelo_lm_1<-lm(ACCIDENTES~FECHA+CLASE+DIA_NOMBRE+PERIODO+FESTIVO+MADRE+NAVIDAD+SEMSANTA+ESCOLAR,data=acc_agrupado_1, subset = (FECHA<="2017-12-31"))
summary(modelo_lm_1)
#acc_year$PERIODO <- as.numeric(acc_year$PERIODO)
modelo_lm_1<-lm(ACCIDENTES~FECHA+CLASE+DIA_NOMBRE+PERIODO+FESTIVO+NAVIDAD+SEMSANTA+ESCOLAR,data=acc_agrupado_1, subset = (FECHA<="2017-12-31"))
summary(modelo_lm_1)
modelo_lm_1<-lm(ACCIDENTES~FECHA+CLASE+DIA_NOMBRE+PERIODO+FESTIVO+NAVIDAD+SEMSANTA,data=acc_agrupado_1, subset = (FECHA<="2017-12-31"))
summary(modelo_lm_1)
#acc_year$PERIODO <- as.numeric(acc_year$PERIODO)
modelo_lm_1<-lm(ACCIDENTES~FECHA+CLASE+DIA_NOMBRE+PERIODO+FESTIVO+NAVIDAD+SEMSANTA+ESCOLAR,data=acc_agrupado_1, subset = (FECHA<="2017-12-31"))
summary(modelo_lm_1)
#acc_year$PERIODO <- as.numeric(acc_year$PERIODO)
modelo_lm_2<-lm(ACCIDENTES~FECHA+DIA_NOMBRE+PERIODO+CLASE+MES+DIA+COMUNA+FESTIVO+MADRE+NAVIDAD+BRUJITOS+SEMSANTA+ESCOLAR,data=acc_agrupado_2, subset = (FECHA<="2017-12-31"))
summary(modelo_lm_2)
modelo_glm<-glm(ACCIDENTES ~ FECHA + CLASE + DIA_NOMBRE + PERIODO +
FESTIVO + NAVIDAD + SEMSANTA + ESCOLAR,data = acc_agrupado_1,
subset = (FECHA <= "2017-12-31"),family = "poisson")
summary(modelo_glm)
y_pred_tr_glm<-predict(modelo_glm,type="response")
r_tr_glm<-acc_agrupado_1$ACCIDENTES[acc_agrupado_1$Fecha<="2017-12-31"]-y_pred_tr_glm
R_tr_glm<-mean(r_tr_glm^2)
R2_tr_glm<-1-R_tr_glm/R0_tr
print(R2_tr_glm)
y_pred_tr_glm<-predict(modelo_glm,type="response")
r_tr_glm<-acc_agrupado_1$ACCIDENTES[acc_agrupado_1$FECHA<="2017-12-31"]-y_pred_tr_glm
R_tr_glm<-mean(r_tr_glm^2)
R2_tr_glm<-1-R_tr_glm/R0_tr
print(R2_tr_glm)
